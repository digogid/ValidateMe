<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HasMoreThanNeededDays" xml:space="preserve">
    <value>{0} deve ter até {1} dias</value>
  </data>
  <data name="HasMoreThanNeededYears" xml:space="preserve">
    <value>{0} deve ter até {1} anos</value>
  </data>
  <data name="HasNotEnoughDays" xml:space="preserve">
    <value>{0} deve ter, ao menos, {1} dias até hoje</value>
  </data>
  <data name="HasNotEnoughYears" xml:space="preserve">
    <value>{0} deve ter, ao menos, {1} anos até hoje</value>
  </data>
  <data name="HasNotExactLength" xml:space="preserve">
    <value>{0} deve ter exatamente {1} caracteres</value>
  </data>
  <data name="HasNotMinimumWords" xml:space="preserve">
    <value>{0} deve ter, ao menos, {1} palavras</value>
  </data>
  <data name="HasNoSpecialCharacters" xml:space="preserve">
    <value>{0} não contém nenhum caracter especial</value>
  </data>
  <data name="HasNoValue" xml:space="preserve">
    <value>{0} é obrigatório</value>
  </data>
  <data name="IsNotAfternoon" xml:space="preserve">
    <value>{0} deve ser à tarde</value>
  </data>
  <data name="IsNotAlphabetic" xml:space="preserve">
    <value>{0} deve conter apenas letras</value>
  </data>
  <data name="IsNotAlphanumeric" xml:space="preserve">
    <value>{0} deve conter ao menos uma letra e um algarismo</value>
  </data>
  <data name="IsNotDawn" xml:space="preserve">
    <value>{0} deve ser de madrugada</value>
  </data>
  <data name="IsNotEmail" xml:space="preserve">
    <value>{0} não é um e-mail válido</value>
  </data>
  <data name="IsNotEqual" xml:space="preserve">
    <value>{0} deve ser igual a {1}</value>
  </data>
  <data name="IsNotEven" xml:space="preserve">
    <value>{0} deve ser um número par</value>
  </data>
  <data name="IsNotEvening" xml:space="preserve">
    <value>{0} deve ser à noite</value>
  </data>
  <data name="IsNotGreaterThan" xml:space="preserve">
    <value>{0} deve ser maior que {1} {2}</value>
  </data>
  <data name="IsNotGuid" xml:space="preserve">
    <value>{0} deve estar no formato de um Guid</value>
  </data>
  <data name="IsNotInFuture" xml:space="preserve">
    <value>{0} deve estar no futuro</value>
  </data>
  <data name="IsNotInLast24Hours" xml:space="preserve">
    <value>{0} deve estar nas últimas 24 horas</value>
  </data>
  <data name="IsNotInLast365Days" xml:space="preserve">
    <value>{0} deve estar nos últimos 365 dias</value>
  </data>
  <data name="IsNotInNext24Hours" xml:space="preserve">
    <value>{0} deve estar nas próximas 24 horas</value>
  </data>
  <data name="IsNotInNext365Days" xml:space="preserve">
    <value>{0} deve estar nos próximos 365 dias</value>
  </data>
  <data name="IsNotInPast" xml:space="preserve">
    <value>{0} deve estar no passado</value>
  </data>
  <data name="IsNotLeapYear" xml:space="preserve">
    <value>{0} deve ser ano bissexto</value>
  </data>
  <data name="IsNotMoreRecentThan" xml:space="preserve">
    <value>{0} deve ser mais recente que {1}</value>
  </data>
  <data name="IsNotMorning" xml:space="preserve">
    <value>{0} deve ser de manhã</value>
  </data>
  <data name="IsNotNegative" xml:space="preserve">
    <value>{0} deve ser um número negativo</value>
  </data>
  <data name="IsNotNumeric" xml:space="preserve">
    <value>{0} deve conter apenas números</value>
  </data>
  <data name="IsNotOdd" xml:space="preserve">
    <value>{0} deve ser um número ímpar</value>
  </data>
  <data name="IsNotOlderThan" xml:space="preserve">
    <value>{0} deve ser mais antigo que {1}</value>
  </data>
  <data name="IsNotPositive" xml:space="preserve">
    <value>{0} deve ser um número positivo</value>
  </data>
  <data name="IsNotSafe" xml:space="preserve">
    <value>{0} não confere com nossos padrões de segurança</value>
  </data>
  <data name="IsNotSmallerThan" xml:space="preserve">
    <value>{0} deve ser menor que {1} {2}</value>
  </data>
  <data name="IsNotToday" xml:space="preserve">
    <value>{0} deve ser hoje</value>
  </data>
  <data name="IsNotTomorrow" xml:space="preserve">
    <value>{0} deve ser amanhã</value>
  </data>
  <data name="IsNotWeekday" xml:space="preserve">
    <value>{0} deve ser dia de semana</value>
  </data>
  <data name="IsNotWeekend" xml:space="preserve">
    <value>{0} deve ser final de semana</value>
  </data>
  <data name="IsNotYesterday" xml:space="preserve">
    <value>{0} deve ser ontem</value>
  </data>
  <data name="IsNotZero" xml:space="preserve">
    <value>{0} deve ser zero</value>
  </data>
  <data name="Misformatted" xml:space="preserve">
    <value>{0} não está bem formatado</value>
  </data>
  <data name="IncorrectType" xml:space="preserve">
    <value>{0} era esperado. Foi recebido {1} em seu lugar.</value>
  </data>
  <data name="IsNotDifferentFrom" xml:space="preserve">
    <value>{0} deve ser diferente de  {1}</value>
  </data>
  <data name="IsNotGreaterOrEqualTo" xml:space="preserve">
    <value>{0} deve ser maior ou igual a  {1}</value>
  </data>
  <data name="IsNotSmallerOrEqualTo" xml:space="preserve">
    <value>{0} deve ser menor ou igual a {1}</value>
  </data>
</root>